 function process_level1(inputPath, out, varargin)
% +
% Processes a set of images generated by the IN instrument 
% Inputs
%   enableSingleDropSkip: Including this argument will cause the second
%                         pass to validation to skip any detection events
%                         where only one possible freeze event was detected
%      sensitivityAdjust: Default 0.9. Increasing this value towards 0.99
%                         will cause the detection routine to become more
%                         sensitive at the cost of including more false
%                         positives. See code for details
%               tileSize: Size of the tiles used for detecting drops
%                         (default 100 pixels). Must be large enough to
%                         hold drops and small enough that edges of
%                         neighboring drops are not included in tile
%                         (mostly).
% Output
%     verifiedDrops: Array of structures where each element contains the 
%                    information for one selected drop. 
%     Strucutre elements are
%        x: x location on image where drop was selected
%        y: y location on image where drop was selected
%        T: Temperature where freeze occurred
%     tile: Image containing the tile data used to select freeze event
% fileName: File name of image preceeding freeze event
%
% Examples
%   Run program on image set
%    inputpath = 'savedImages\20171113_Experiment1';
%    process_level1(inputpath);
%
%   Run program and with skipping single detection
%    process_level1(inputpath,'enableSingleDropSkip');
%
%   Override sensitivity and tile size
%    process_level1(inputpath,'sensitivityAdjust',.95,'tileSize',150);
%
% Authors: Timothy Wright (tpwright@ncsu.edu)
%          Markus Petters (mdpetter@ncsu.edu)
% 
%          Department of Marine Earth and Atmospheric Science
%          NC State University
%
% Version: 1.0 Initial Release November 2017 
%          Modified by TP Wright and MD Petters (2017-2019)
% 
% -

bp = inputPath;

% Handle the optional inputs
for i = 1:length(varargin)
    switch(varargin{i})
        case 'enableSingleDropSkip'
            enableSingleDropSkip = 1;
        case 'sensitivityAdjust'
            sensitivityAdjust = 1-varargin{i+1};
            i = i+1;
        case 'tileSize'
            tileSize = varargin{i+1};
            i = i+1;
        case 'identifyDropsManually'
            identifyDropsManually = varargin{i+1};
    end
end

if ~exist('sensitivityAdjust','var')
    sensitivityAdjust = 0.1;
end

if ~exist('tileSize','var')
    tileSize = 100; 
end

if ~exist('identifyDropsManually','var')
    identifyDropsManually = true; 
end


% The main processing steps
[image_files,TLog] = load_log(bp);  % load the files
if identifyDropsManually == true
    [drop, ~, ~] = generate_drops(bp, image_files, TLog);
else
    d = dir([bp,'*.jpg']);
    hUnfrozenIm = [bp,d(1).name];
    hFrozenIm = [bp,d(end).name];
 
    fprintf('Attempting to open: %s\n',hFrozenIm);
 
    [~,drop] = findDrops(hUnfrozenIm,hFrozenIm,TLog);
end


% this function tiles the images and stores them with the drops
drop = load_and_tile_images(bp, image_files, TLog, drop, tileSize);
drop = parse_drops(drop, sensitivityAdjust);
save('part1.mat')                    % save a snapshot
 
status = mkdir(out);
validate_drops(out, drop);           % validation function
final_report(bp, out, image_files);  % makes two report graphs
